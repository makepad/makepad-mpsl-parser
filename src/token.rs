use crate::span::{FromInnerAndSpan, Span};

#[derive(Clone, Copy, Debug, PartialEq, PartialOrd)]
pub struct TokenWithSpan {
    pub span: Span,
    pub token: Token,
}

impl FromInnerAndSpan for TokenWithSpan {
    type Inner = Token;

    fn from_inner_and_span(token: Token, span: Span) -> TokenWithSpan {
        TokenWithSpan { token, span }
    }
}

#[derive(Clone, Copy, Debug, PartialEq, PartialOrd)]
pub enum Token {
    Eof,
    Not,
    Ne,
    AndAnd,
    LeftParen,
    RightParen,
    Star,
    StarEq,
    Plus,
    PlusPlus,
    PlusEq,
    Comma,
    Minus,
    MinusMinus,
    MinusEq,
    Arrow,
    Dot,
    DotDot,
    Slash,
    SlashEq,
    Colon,
    Semicolon,
    Le,
    Lt,
    Eq,
    EqEq,
    Gt,
    Ge,
    Question,
    LeftBracket,
    RightBracket,
    XorXor,
    LeftBrace,
    OrOr,
    RightBrace,
    BoolConstant(bool),
    IntConstant(i32),
    FloatConstant(f32),
    Attribute,
    Bool,
    Break,
    Bvec2,
    Bvec3,
    Bvec4,
    Const,
    Continue,
    Discard,
    Do,
    Else,
    Float,
    Fn,
    For,
    Highp,
    If,
    In,
    Inout,
    Int,
    Invariant,
    Ivec2,
    Ivec3,
    Ivec4,
    Let,
    Lowp,
    Mat2,
    Mat3,
    Mat4,
    Mediump,
    Out,
    Precision,
    Return,
    Sampler2D,
    SamplerCube,
    Struct,
    Uniform,
    Varying,
    Vec2,
    Vec3,
    Vec4,
    Void,
    While,
    Identifier,
}
